[credential]
    helper = manager-core
[init]
    defaultBranch = main
[core]
    exludesfile = ~/.gitignore
    editor = nvim
    autocrlf = true
[push]
    default = simple
[color]
    status = auto
    diff = auto
    branch = auto
    interactive = auto
    grep = auto
    ui = auto
[alias]
    a = "!git status --short | peco | awk '{print $2}' | xargs git add"
    co = checkout
    cl = clone
    ci = commit
    ca = commit -am
    cm = commit -m
    ft = fetch
    d = diff
    dc = diff --color-words
    df = "!git hist | peco | awk '{print $2}' | xargs -I {} git diff {}^ {}"
    ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)"
    pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD)"
    st = status -u -s
    br = branch
    ba = branch -a
    bm = branch --merged
    bn = branch --no-merged
    hist = log --pretty=format:\"%Cgreen%h %Creset%cd %Cblue[%cn] %Creset%s%C(yellow)%d%C(reset)\" --graph --date=relative --decorate --all
    hists = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    llog = log --graph --name-status --pretty=format:\"%C(red)%h %C(reset)(%cd) %C(green)%an %Creset%s %C(yellow)%d%Creset\" --date=relative
    logg = log --grep
    log-tree = log --graph --oneline --decorate --all
    lp  = log --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cd)%Creset' --abbrev-commit --date=rfc
    lpu = log --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr)%Creset - %C(magenta)%cn%Creset' --abbrev-commit --date=relative
    lpn = log --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr)%Creset - %C(magenta)%cn%Creset' --abbrev-commit --date=relative -n
    lpd = log --pretty=format:'%Cgreen%cd%Creset %Cred%h%Creset %C(yellow)%d%Creset %s' --abbrev-commit --date=short
    open = "!hub browse"
    type = cat-file -t
    dump = cat-file -p
    find = "!f() { git log --pretty=format:\"%h %cd [%cn] %s%d\" --date=relative -S'pretty' -S\"$@\" | peco | awk '{print $1}' | xargs -I {} git diff {}^ {}; }; f"
    # edit conflicted file on merge
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
    # add conflicted file on merge
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
[hub]
    protocol = https
[github]
    user = acheddir
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    required = true
    process = git-lfs filter-process
[ghq]
    root = ~/.ghq
[fetch]
    prune = true
[user]
	email = acheddir@outlook.fr
	name = Abderrahman Cheddir
[safe]
	directory = C:\\Users\\Abderrahman\\scoop\\buckets\\main
	directory = C:\\Users\\Abderrahman\\scoop\\buckets\\extras
	directory = C:\\Users\\Abderrahman\\scoop\\buckets\\nerd-fonts
